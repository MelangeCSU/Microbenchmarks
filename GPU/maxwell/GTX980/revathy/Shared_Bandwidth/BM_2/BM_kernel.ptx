//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_52
.address_size 64

	// .weak	cudaMalloc
// _Z8BWkernelPii$__cuda_local_var_42886_30_non_const_s_A has been demoted
// _Z8BWkernelPii$__cuda_local_var_42886_41_non_const_s_B has been demoted
// _Z8BWkernelPii$__cuda_local_var_42886_52_non_const_s_C has been demoted

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z8BWkernelPii
.visible .entry _Z8BWkernelPii(
	.param .u64 _Z8BWkernelPii_param_0,
	.param .u32 _Z8BWkernelPii_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<14>;
	// demoted variable
	.shared .align 4 .b8 _Z8BWkernelPii$__cuda_local_var_42886_30_non_const_s_A[16384];
	// demoted variable
	.shared .align 4 .b8 _Z8BWkernelPii$__cuda_local_var_42886_41_non_const_s_B[16384];
	// demoted variable
	.shared .align 4 .b8 _Z8BWkernelPii$__cuda_local_var_42886_52_non_const_s_C[16384];

	ld.param.u64 	%rd2, [_Z8BWkernelPii_param_0];
	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r7, 0;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r16, %r7;

BB6_1:
	.pragma "nounroll";
	mov.u32 	%r15, %r7;

BB6_2:
	.pragma "nounroll";
	mov.u32 	%r4, %r15;
	add.s32 	%r9, %r4, %r1;
	mul.wide.s32 	%rd3, %r9, 4;
	mov.u64 	%rd4, _Z8BWkernelPii$__cuda_local_var_42886_30_non_const_s_A;
	add.s64 	%rd5, %rd4, %rd3;
	mov.u64 	%rd6, _Z8BWkernelPii$__cuda_local_var_42886_41_non_const_s_B;
	add.s64 	%rd7, %rd6, %rd3;
	ld.shared.u32 	%r10, [%rd7];
	ld.shared.u32 	%r11, [%rd5];
	add.s32 	%r12, %r10, %r11;
	mov.u64 	%rd8, _Z8BWkernelPii$__cuda_local_var_42886_52_non_const_s_C;
	add.s64 	%rd9, %rd8, %rd3;
	st.shared.u32 	[%rd9], %r12;
	add.s32 	%r5, %r4, %r2;
	setp.lt.s32	%p1, %r5, 2048;
	mov.u32 	%r15, %r5;
	@%p1 bra 	BB6_2;

	add.s32 	%r16, %r16, 1;
	setp.lt.s32	%p2, %r16, 2000000;
	@%p2 bra 	BB6_1;

	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd12, %rd8, %rd10;
	ld.shared.u32 	%r13, [%rd12];
	add.s64 	%rd13, %rd1, %rd10;
	st.global.u32 	[%rd13], %r13;
	ret;
}


